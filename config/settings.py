"""
Django settings for config project.
Generated by 'django-admin startproject' using Django 5.2.5
"""

from pathlib import Path
import os
from dotenv import load_dotenv  # .env 파일 로드  
# ──────────────────────────────────────────────────────────────────────
# 기본 경로
# ──────────────────────────────────────────────────────────────────────
BASE_DIR = Path(__file__).resolve().parent.parent  # 프로젝트 루트

# .env 경로 명시(UTF-8), OS 환경변수보다 .env 우선(override=True)
load_dotenv(dotenv_path=BASE_DIR / ".env", override=True, encoding="utf-8")

def _req(name: str) -> str:
    """필수 환경변수 로더: 없으면 즉시 오류로 알려줌(배포 안전성↑)."""
    v = os.getenv(name)

    if not v:
        raise RuntimeError(f"[ENV 누락] {name} 가 비어있어요. .env 및 load_dotenv 경로를 확인!")
    return v

# ──────────────────────────────────────────────────────────────────────
# 보안/디버그
# ──────────────────────────────────────────────────────────────────────
SECRET_KEY = _req("DJANGO_SECRET_KEY")     # ★ 필수: .env에 설정
DEBUG = bool(int(os.getenv("DJANGO_DEBUG", "1")))
ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",") if not DEBUG else ["*"]
# 예: DJANGO_ALLOWED_HOSTS=example.com,www.example.com

# ──────────────────────────────────────────────────────────────────────
# 앱 설정
# ──────────────────────────────────────────────────────────────────────
INSTALLED_APPS = [
    "daphne",                          # ASGI 서버
    "channels",                         # 채널(웹소켓)
    
    "django.contrib.admin",          # 관리자
    "django.contrib.auth",           # 인증/권한
    "django.contrib.contenttypes",   # 권한 시스템 보조
    "django.contrib.sessions",       # 세션
    "django.contrib.messages",       # 플래시 메시지
    "django.contrib.staticfiles",    # 정적 파일

    "django.contrib.sites",          # allauth 필수
    "allauth",                       # allauth 코어
    "allauth.account",               # 이메일/아이디 계정
    "allauth.socialaccount",         # 소셜 계정 프레임워크

    "allauth.socialaccount.providers.kakao",  # 카카오 provider
    "allauth.socialaccount.providers.naver",  # 네이버 provider

    "accounts.apps.AccountsConfig",                      # 커스텀 유저 앱
    # "collab",                           # 협업 앱
    'collab.apps.CollabConfig',
    "logui",                           # 로그 UI

]
ASGI_APPLICATION = "config.asgi.application" # Channels용 ASGI 애플리케이션

# ──────────────────────────────────────────────────────────────────────
# Redis / Channels (WebSocket)
# ──────────────────────────────────────────────────────────────────────

# 1) REDIS_URL: .env 없으면 로컬 6379로 기본값
REDIS_URL = os.getenv("REDIS_URL", "redis://127.0.0.1:6379/0")

# 2) Channels가 사용할 채널 레이어
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",  # Redis 기반 채널 레이어
        "CONFIG": {
            "hosts": [REDIS_URL],                            # ← hosts는 CONFIG 안에!
            # 필요 시 옵션 예: "capacity": 1000, "expiry": 60
        },
    }
}





SESSION_ENGINE = "django.contrib.sessions.backends.db"



MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",   # ★ AuthMiddleware 바로 뒤 (세션/유저 활용)
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
# Redis 캐시 (channels 레디스와 DB 분리: 1번 DB 사용 권장)
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.getenv("REDIS_URL_CACHE", "redis://127.0.0.1:6379/1"),
    }
}
SESSION_SAVE_EVERY_REQUEST = True

ROOT_URLCONF = "config.urls"

# ──────────────────────────────────────────────────────────────────────
# 템플릿
# ──────────────────────────────────────────────────────────────────────
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # 프로젝트 전역 templates 폴더
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",  # ★ allauth 템플릿이 request 필요
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# ──────────────────────────────────────────────────────────────────────
# 사이트/로그인 리다이렉트
# ──────────────────────────────────────────────────────────────────────
SITE_ID = int(os.getenv("SITE_ID", "4"))   # /admin/sites/site/와 매칭
LOGIN_REDIRECT_URL = os.getenv("LOGIN_REDIRECT_URL", "/")   # 로그인 성공 후 이동
LOGOUT_REDIRECT_URL = os.getenv("LOGOUT_REDIRECT_URL", "/") # 로그아웃 후 이동

# ──────────────────────────────────────────────────────────────────────
# allauth 신권장 설정(Deprecated 경고 제거)
# ──────────────────────────────────────────────────────────────────────
# 예: username+email 둘 다로 로그인 허용
ACCOUNT_LOGIN_METHODS = {"username", "email"}

# 회원가입에서 받을 필드 정의(별 * = 필수)
# username을 쓰지 않는다면 아래처럼 email+pw만:
# ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
# username도 쓰려면:
ACCOUNT_SIGNUP_FIELDS = ["email*", "username*", "password1*", "password2*","birth_date*","nickname*", "phone_number*"]

# 이메일 검증 정책: 개발은 optional, 운영은 "mandatory" 권장
ACCOUNT_EMAIL_VERIFICATION = os.getenv("ACCOUNT_EMAIL_VERIFICATION", "optional").lower()

# (선택) 커스텀 로그인 폼 연결 시
ACCOUNT_FORMS = {
    "login": "accounts.forms.MyLoginForm", 
    "signup": "accounts.forms.MySignupForm",
}
SOCIALACCOUNT_FORMS = {
    "signup": "accounts.forms.MySocialSignupForm",
}

# 인증 백엔드: allauth 추가 필수
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# ──────────────────────────────────────────────────────────────────────
# 데이터베이스(MySQL)
# ──────────────────────────────────────────────────────────────────────
DB_NAME = _req("DB_NAME")
DB_USER = _req("DB_USER")
DB_PASSWORD = _req("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "3306")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": DB_NAME,
        "USER": DB_USER,
        "PASSWORD": DB_PASSWORD,
        "HOST": DB_HOST,
        "PORT": DB_PORT,
        "OPTIONS": {
            "charset": "utf8mb4",
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES', time_zone = '+00:00'",
        },
    }
}

# ──────────────────────────────────────────────────────────────────────
# 사용자 모델
# ──────────────────────────────────────────────────────────────────────
AUTH_USER_MODEL = "accounts.User"  # ★ 프로젝트 초기에 결정(마이그레이션 전)

# ──────────────────────────────────────────────────────────────────────
# 패스워드 정책/해시
# ──────────────────────────────────────────────────────────────────────
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",       # 신규 비번 기본 Argon2
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},  # 기본 최소 8자
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ──────────────────────────────────────────────────────────────────────
# 국제화/시간대
# ──────────────────────────────────────────────────────────────────────
LANGUAGE_CODE = "ko-kr"
TIME_ZONE = "Asia/Seoul"
USE_I18N = True
USE_TZ = True

# ──────────────────────────────────────────────────────────────────────
# 정적/미디어 (login.css 포함)
# ──────────────────────────────────────────────────────────────────────
STATIC_URL = "/static/"                         # 정적 URL 프리픽스
STATICFILES_DIRS = [BASE_DIR / "static"]        # 개발: /static/css/login.css 등
# 배포 시 collectstatic 대상
STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# ──────────────────────────────────────────────────────────────────────
# 이메일 (개발: 콘솔 출력)
# ──────────────────────────────────────────────────────────────────────
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# ──────────────────────────────────────────────────────────────────────
# allauth 소셜 프로바이더(선택적으로 .env에서 바로 주입)
# Admin의 SocialApp과 중복 설정 시 Admin 값이 우선.
# ──────────────────────────────────────────────────────────────────────
SOCIALACCOUNT_PROVIDERS = {
    "kakao": {  # 카카오는 닉네임/이미지만 받도록 유지
        "SCOPE": ["profile_nickname", "profile_image"],
    },
    "naver": {
        # 네이버에서 쓰는 필드를 받기 위한 동의 항목들
        "SCOPE": ["name", "email", "nickname", "profile_image", "birthyear", "birthday", "mobile"],
    },
}

# 기본 Primary Key 타입
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# settings.py (파일 하단 어딘가에 추가)

# ────────────────────────────────────────────────────────────────────── 로그 설정(미니멀)
LOG_LEVEL = os.getenv("DJANGO_LOG_LEVEL", "INFO").upper()

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "short": {"format": "%(levelname)s %(name)s: %(message)s"},
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "short"},
    },
    "root": {"handlers": ["console"], "level": "WARNING"},
    "loggers": {
        "django":         {"handlers": ["console"], "level": "WARNING", "propagate": False},
        "allauth":        {"handlers": ["console"], "level": "WARNING", "propagate": False},
        "asyncio":        {"handlers": ["console"], "level": "WARNING", "propagate": False},
        "daphne":         {"handlers": ["console"], "level": "WARNING", "propagate": False},
        "channels":       {"handlers": ["console"], "level": "WARNING", "propagate": False},
        "channels_redis": {"handlers": ["console"], "level": "WARNING", "propagate": False},
        "asgiref":        {"handlers": ["console"], "level": "WARNING", "propagate": False},

        # 👇 내가 보는 로거
        "accounts": {"handlers": ["console"], "level": LOG_LEVEL, "propagate": False},
        "collab":   {"handlers": ["console"], "level": LOG_LEVEL, "propagate": False},
        "lobby":   {"handlers": ["console"], "level": LOG_LEVEL, "propagate": False},

    },
}

# ───────────────────────────────────────────────────────────────────── ─ 소셜 어댑터 설정
SOCIALACCOUNT_ADAPTER = "accounts.adapters.MySocialAccountAdapter"

# 로그인 확인화면 Pass
SOCIALACCOUNT_LOGIN_ON_GET = True
# 로그아웃시 리다이렉트
ACCOUNT_LOGOUT_ON_GET=True
ACCOUNT_LOGOUT_REDIRECT_URL = "/"

# 루트 URL 설정
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "http"

# 자동 회원가입 비활성화
SOCIALACCOUNT_AUTO_SIGNUP = False



# 🔊 개발용 간단 로깅(콘솔)
# LOGGING = {
#     "version": 1,
#     "handlers": {"console": {"class": "logging.StreamHandler"}},
#     "loggers": {
#         "accounts": {"handlers": ["console"], "level": "DEBUG"},
#         "allauth":  {"handlers": ["console"], "level": "INFO"},   # 원하면 DEBUG
#         "django.request": {"handlers": ["console"], "level": "WARNING"},
#     },
# }
